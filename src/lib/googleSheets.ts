import { RunClub } from '@/types/runclub';

// Google Sheets integration - server-side only
let googleAPI: typeof import('googleapis').google | null = null;

async function getGoogleAPI() {
  if (typeof window !== 'undefined') {
    throw new Error('Google Sheets API can only be used on the server side');
  }
  
  if (!googleAPI) {
    const { google } = await import('googleapis');
    googleAPI = google;
  }
  return googleAPI;
}

const SHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID!;
const PRIVATE_KEY = process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n');
const CLIENT_EMAIL = process.env.GOOGLE_SHEETS_CLIENT_EMAIL;

// eslint-disable-next-line @typescript-eslint/no-explicit-any
let authClient: any = null;

async function getAuthClient() {
  if (!authClient) {
    if (!PRIVATE_KEY || !CLIENT_EMAIL) {
      throw new Error('Google Sheets credentials not configured');
    }

    const google = await getGoogleAPI();
    authClient = new google.auth.GoogleAuth({
      credentials: {
        private_key: PRIVATE_KEY,
        client_email: CLIENT_EMAIL,
      },
      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
    });
  }
  return authClient;
}

export async function fetchRunClubsFromSheets(): Promise<RunClub[]> {
  try {
    const auth = await getAuthClient();
    const google = await getGoogleAPI();
    const sheets = google.sheets({ version: 'v4', auth });

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: 'Generated by Outscraper Â©!A:Q', // Use the actual sheet tab name
    });

    const rows = response.data.values;
    if (!rows || rows.length === 0) {
      console.log('No data found in Google Sheets');
      return [];
    }

    // Skip header row
    const dataRows = rows.slice(1);
    
    const runClubs: RunClub[] = dataRows.map((row, index) => {
      // Fixed column mapping based on actual Google Sheets structure:
      // 0:name, 1:site, 2:category, 3:phone, 4:full_address, 5:borough, 
      // 7:city, 8:postal_code, 9:latitude, 10:longitude, 11:h3, 13:rating, 14:reviews
      
      return {
        id: `club-${index + 1}`,
        name: row[0] || '',
        site: row[1] || undefined,
        category: row[2] || 'Athletic club',
        phone: row[3] || undefined,
        full_address: row[4] || '',
        city: row[5] || row[7] || '', // Use borough (column 5) or city (column 7)
        postal_code: row[8] || '',
        latitude: parseFloat(row[9]) || 0,
        longitude: parseFloat(row[10]) || 0,
        rating: parseFloat(row[13]) || 0, // Fixed: rating is in column 13
        reviews: parseInt(row[14]) || 0,  // Fixed: reviews is in column 14
        photo: row[11] || undefined,      // h3 hex codes are in column 11
        description: row[12] !== 'FALSE' ? row[12] : undefined, // Skip "FALSE" values
        email_1: row[15] || undefined,    // Email might be in a later column
      };
    }).filter(club => club.name && club.full_address); // Filter out empty entries

    return runClubs;
  } catch (error) {
    console.error('Error fetching from Google Sheets:', error);
    throw error;
  }
}

export async function searchRunClubs(query: string = '', location: string = ''): Promise<RunClub[]> {
  const clubs = await fetchRunClubsFromSheets();
  
  if (!query && !location) {
    return clubs;
  }

  return clubs.filter(club => {
    const matchesQuery = !query || 
      club.name.toLowerCase().includes(query.toLowerCase()) ||
      club.description?.toLowerCase().includes(query.toLowerCase()) ||
      club.category.toLowerCase().includes(query.toLowerCase());
    
    const matchesLocation = !location ||
      club.city.toLowerCase().includes(location.toLowerCase()) ||
      club.postal_code.toLowerCase().includes(location.toLowerCase()) ||
      club.full_address.toLowerCase().includes(location.toLowerCase());
    
    return matchesQuery && matchesLocation;
  });
}